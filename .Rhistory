power <- 2
model_pars <- c(model_pars, power = power)
}
if (is.null(model_pars[["sigma"]])) {
sigma <- .5
model_pars <- c(model_pars, sigma = sigma)
}
}
)
}
SMOTEBoost.R2.train
SMOTEBoost.RQ.train
SMOTEBoost.RT.train
SMOTEBoost.RT.train
SMOTEBoost.RT.train
SMOTEBoost.RTPlus.train
SMOTEBoost.R2.train
SMOTEBoost.RQ.train
SMOTEBoost.RT.train
document()
document()
library(ReBoost)
data(iris)
head(iris)
SmoteBoost(Sepal.Length ~., iris, modeltype = "RTPlus",
model_pars = NULL)
library(ReBoost)
m<-SmoteBoost(Sepal.Length ~., iris, modeltype = "RTPlus",
model_pars = NULL)
library(ReBoost)
SmoteBoost
document()
library(ReBoost)
rm(SmoteBoost)
SmoteBoost
library(ReBoost)
SmoteBoost
library(ReBoost)
SmoteBoost
document()
document()
library(ReBoost)
SmoteBoost
m<-SmoteBoost(Sepal.Length ~., iris, modeltype = "RTPlus",
model_pars = NULL)
library(ReBoost)
m<-SmoteBoost(Sepal.Length ~., iris, modeltype = "RTPlus",
model_pars = NULL)
m<-SmoteBoost(Sepal.Length ~., iris, modeltype = "RTPlus",
model_pars = NULL)
iris
SmoteBoost
SMOTEBoost.RT.train
form<-Sepal.Length ~.
a<-SMOTEBoost.RT.train(form = form,
data = iris,
niter=100,
thr = .01,
power = 2,
sigma = .5,
perc.O = 1.3)
a<-SMOTEBoost.RT.train(form = form,
data = iris,
niter=100,
power = 2,
perc.O = 1.3)
form
a<-SMOTEBoost.RT.train(form = form,
data = iris,niter=100,
power = 2,
perc.O = 1.3)
form<-Sepal.Length ~Species
m<-SmoteBoost(form, iris, modeltype = "RTPlus",
model_pars = NULL)
data(iris)
head(iris)
gsub(".","_",colnames(iris))
gsub("\.","_",colnames(iris))
gsub("\\.","_",colnames(iris))
colnames(iris) <- gsub("\\.","_",colnames(iris))
form<-Sepal_Length ~.
m<-SmoteBoost(form, iris, modeltype = "RTPlus",
model_pars = NULL)
library(ReBoost)
library(ReBoost)
m<-SmoteBoost(form, iris, modeltype = "RTPlus",
model_pars = NULL)
form1
dat1
heaD(dat1)
head(dat1)
dat<-dat1
form<-form1
require(UBL)
y <- dat[, as.character(form[[2]])]
y
if (length(pc) != 3) {
pc <- UBL::phi.control(y = y,
method = "extremes",
coef = 1.5)
}
pc = NULL
rel.thr<-.01
k<-2
perc.o<-1.5
y <- dat[, as.character(form[[2]])]
if (length(pc) != 3) {
pc <- UBL::phi.control(y = y,
method = "extremes",
coef = 1.5)
}
new.dat <- c()
if (any(pc$control.pts[c(2, 8)] == 1)) {
percs <- list()
if (pc$control.pts[2] == 1) {
if (length(grDevices::boxplot.stats(y)$out <= pc$control.pts[1]) > 1) {
percs <- c(percs, perc.o)
} else {
percs <- c(percs, 1)
}
}
percs <- c(percs, 1)
if (pc$control.pts[8] == 1) {
if (length(grDevices::boxplot.stats(y)$out >= pc$control.pts[7]) > 1) {
percs <- c(percs, perc.o)
} else {
percs <- c(percs, 1)
}
}
if (any(sapply(dat, is.numeric) == FALSE)) {
#If there's any nominal predictor, use HEOM distance
new.dat <-
UBL::SmoteRegress(
form,
dat,
rel = pc,
thr.rel = rel.thr,
C.perc = percs,
k = k,
dist = "HEOM"
)
} else {
#If all predictors are numerical, use Euclidean distance
new.dat <-
UBL::SmoteRegress(
form,
dat,
rel = pc,
thr.rel = rel.thr,
C.perc = percs,
k = k,
dist = "Euclidean"
)
}
} else {
warning("Did not found any extreme cases.
Returning the original train set.")
}
new.dat
#If all predictors are numerical, use Euclidean distance
new.dat <-
UBL::SmoteRegress(
form,
dat,
rel = pc,
thr.rel = rel.thr,
C.perc = percs,
k = k,
dist = "Euclidean"
)
new.dat
dat[, as.character(form[[2]])]
dat
any(sapply(dat, is.numeric) == FALSE
)
#If there's any nominal predictor, use HEOM distance
new.dat <-
UBL::SmoteRegress(
form,
dat,
rel = pc,
thr.rel = rel.thr,
C.perc = percs,
k = k,
dist = "HEOM"
)
m<-SmoteBoost(form, iris, modeltype = "RTPlus",
model_pars = NULL)
m<-SmoteBoost(form, iris, modeltype = "R2",
model_pars = NULL)
SMOTEBoost.RQ.train
SMOTEBoost.R2.train
library(ReBoost)
m<-SmoteBoost(form, iris, modeltype = "R2",
model_pars = NULL)
m<-SmoteBoost(form, iris, modeltype = "RQ",
model_pars = NULL)
library(ReBoost)
m<-SmoteBoost(form, iris, modeltype = "RQ",
model_pars = NULL)
library(rpart)
library(ReBoost)
m<-SmoteBoost(form, iris, modeltype = "RQ",
model_pars = NULL)
library(ReBoost)
m<-SmoteBoost(form, iris, modeltype = "RQ",
model_pars = NULL)
library(ReBoost)
m<-SmoteBoost(form, iris, modeltype = "RQ",
model_pars = NULL)
library(ReBoost)
m<-SmoteBoost(form, iris, modeltype = "RQ",
model_pars = NULL)
train.ind1
data1
x<-data1[train.ind1]
x<-data1[train.ind1,]
pc1
form
perc.O
adaSMOTE(form, x, 1.3, 0.9, k = 3, pc1)
adaSMOTE(form, x, .8, 0.9, k = 3, pc1)
adaSMOTE(form, x, 1.4, 0.9, k = 3, pc1)
library(ReBoost)
adaSMOTE(form, x, 1.4, 0.9, k = 3, pc1)
m<-SmoteBoost(form, iris, modeltype = "RQ",
model_pars = NULL)
library(ReBoost)
SmoteBoost
m<-SmoteBoost(form, iris, modeltype = "RQ",
model_pars = NULL)
library(ReBoost)
m<-SmoteBoost(form, iris, modeltype = "RQ",
model_pars = NULL)
m
library(ReBoost)
m<-SmoteBoost(form, iris, modeltype = "RQ",
model_pars = NULL)
m
setMethod("show",
signature("SmoteBoost"),
function(object) {
cat(object@form, "\n")
cat("science bitch")
}
)
m
setMethod("show",
signature("SmoteBoost"),
function(object) {
cat("### ",object@perc_over, "\n")
cat("science bitch\n\n")
}
)
m
,
setMethod("show",
signature("SmoteBoost"),
function(object) {
cat("### perc over: ",object@perc_over, "\n")
cat("science bitch\n\n")
}
)
,
m
object<-m
object@model_pars
object@modeltype
#' dataset <- embed_timeseries(water_consumption, 5)
#' train <- dataset[1:1000, ]
#' test <- dataset[1001:1500, ]
#'
#' model <- ADE(target ~., train, specs)
#'
#' preds <- predict(model, test)
#'
#'
#' @export
setMethod("predict",
signature("SmoteBoost"),
function(object, newdata) {
y_hat <-
switch(
object@modeltype,
"RQ" = {
AdaBoost.RQ.predict(models = object@model,
betas = object@model_pars$beta,
newdata = newdata)
},
"RTPlus" = {
AdaBoost.RTPlus.predict(
models = object@model,
newdata = newdata,
delta = object@model_pars$delta)
},
"R2" = {
AdaBoost.R2.predict(models = object@model,
betas = object@model_pars$beta,
newdata = newdata)
},
"RT" = {
AdaBoost.RT.predict(models = object@model,
newdata = newdata,
delta = object@model_pars$delta)
}
)
y_hat
})
predict(m, iris)
document()
document()
library(ReBoost)
predict(m, iris)
document()
document()
library(ReBoost)
predict(m, iris)
colnames(iris) <- gsub("\\.","_",colnames(iris))
predict(m, iris)
library(ReBoost)
library(ReBoost)
data(iris)
head(iris)
library(rpart)
form<-Sepal.Length ~ .
m<-SmoteBoost(form, iris, modeltype = "RQ",
model_pars = NULL)
colnames(iris) <- gsub("\\.","_",colnames(iris))
data(iris)
m<-SmoteBoost(form, iris, modeltype = "RQ",
model_pars = NULL)
library(ReBoost)
library(ReBoost)
data(iris)
head(iris)
library(rpart)
form<-Sepal.Length ~ .
m<-SmoteBoost(form, iris, modeltype = "RQ",
model_pars = NULL)
predict(m, iris)
a<-SMOTEBoost.RT.train(form = form,
data = iris,niter=100,
power = 2,
perc.O = 1.3)
m<-SmoteBoost(form, iris, modeltype = "RQ",
model_pars = NULL)
warning()
warnings()
m<-SmoteBoost(form, iris, modeltype = "RQ",
model_pars = NULL)
warnings()
m2<-SmoteBoost(form, iris, modeltype = "R2",
model_pars = NULL)
m3<-SmoteBoost(form, iris, modeltype = "RT",
model_pars = NULL)
SMOTEBoost.RT.train
library(ReBoost)
m3<-SmoteBoost(form, iris, modeltype = "RT",
model_pars = NULL)
m4<-SmoteBoost(form, iris, modeltype = "RTPlus",
model_pars = NULL)
predict(m, iris)
predict(m2, iris)
m2<-SmoteBoost(form, iris, modeltype = "R2",
model_pars = NULL)
predict(m2, iris)
m2<-SmoteBoost(form, iris, modeltype = "R2",
model_pars = NULL)
library(ReBoost)
m2<-SmoteBoost(form, iris, modeltype = "R2",
model_pars = NULL)
predict(m2, iris)
object<-m2
object@model_pars$beta
object@model
predict(m2, iris)
library(ReBoost)
predict(m2, iris)
ls()
models1
models<-models1
betas<-betas1
newdata<-newdata1
preds <- lapply(models$models, predict, newdata)
preds <- as.data.frame(preds)
preds
models$models
models
preds <- lapply(models, predict, newdata)
preds <- as.data.frame(preds)
preds
apply(preds, 1,
function(o) {
stats::weighted.mean(o, betas)
})
library(ReBoost)
m2<-SmoteBoost(form, iris, modeltype = "R2",
model_pars = NULL)
predict(m, iris)
predict(m2, iris)
predict(m3, iris)
predict(m4, iris)
library(ReBoost)
m3<-SmoteBoost(form, iris, modeltype = "RT",
model_pars = NULL)
m4<-SmoteBoost(form, iris, modeltype = "RTPlus",
model_pars = NULL)
predict(m3, iris)
predict(m4, iris)
predict(m4, iris)[,1]
library(ReBoost)
predict(m4, iris)
AdaBoost.RTPlus.train
AdaBoost.RQ.train
AdaBoost.R2.train
AdaBoost.RT.train
library(ReBoost)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
library(ReBoost)
unloadNamespace("rpart")
library(ReBoost)
data(iris)
head(iris)
form<-Sepal.Length ~ .
m<-SmoteBoost(form, iris, modeltype = "RQ",
model_pars = NULL)
m2<-SmoteBoost(form, iris, modeltype = "R2",
model_pars = NULL)
m3<-SmoteBoost(form, iris, modeltype = "RT",
model_pars = NULL)
m4<-SmoteBoost(form, iris, modeltype = "RTPlus",
model_pars = NULL)
m5<-AdaBoost(form, iris, modeltype = "RQ",
model_pars = NULL)
m6<-AdaBoost(form, iris, modeltype = "R2",
model_pars = NULL)
m7<-AdaBoost(form, iris, modeltype = "RT",
model_pars = NULL)
m8<-AdaBoost(form, iris, modeltype = "RTPlus",
model_pars = NULL)
library(ReBoost)
m8<-AdaBoost(form, iris, modeltype = "RTPlus",
model_pars = NULL)
library(ReBoost)
m8<-AdaBoost(form, iris, modeltype = "RTPlus",
model_pars = NULL)
predict(m5, iris)
predict(m6, iris)
predict(m7, iris)
predict(m8, iris)
library(ReBoost)
predict(m5, iris)
m5
m5<-AdaBoost(form, iris, modeltype = "RQ",
model_pars = NULL)
m6<-AdaBoost(form, iris, modeltype = "R2",
model_pars = NULL)
m7<-AdaBoost(form, iris, modeltype = "RT",
model_pars = NULL)
m8<-AdaBoost(form, iris, modeltype = "RTPlus",
model_pars = NULL)
predict(m, iris)
predict(m2, iris)
predict(m3, iris)
predict(m4, iris)
predict(m5, iris)
predict(m6, iris)
predict(m7, iris)
predict(m8, iris)
m<-SmoteBoost(form, iris, modeltype = "RQ",
model_pars = list(niter=50))
m@model
library(ReBoost)
devtools::document()
library(ReBoost)
devtools::document()
devtools::document()
library(ReBoost)
devtools::use_testthat()
library(ReBoost)
devtools::use_testthat()
devtools::document()
library(ReBoost)
library(ReBoost)
m10<-AdaBoost(form, iris, modeltype = "BEM",
model_pars = NULL)
library(ReBoost)
m10<-AdaBoost(form, iris, modeltype = "BEM",
model_pars = NULL)
library(ReBoost)
data(iris)
head(iris)
form<-Sepal.Length ~ .
m10<-AdaBoost(form, iris, modeltype = "BEM",
model_pars = NULL)
m10
m10@model
library(ReBoost)
m10<-AdaBoost(form, iris, modeltype = "BEM",
model_pars = NULL)
predict(m10, iris)
library(ReBoost)
library(devtools)
documents()
document()
document()
document()
document()
library(ReBoost)
